{"ast":null,"code":"var _jsxFileName = \"D:\\\\chartjs\\\\chart\\\\src\\\\components\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\n// importing the required components\nimport React, { Fragment, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./FileUpload.css\";\nimport readFile from \"./GetJSON\"; // importing the elements of chart.js\n\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement); // getting the colors for different datasets\n\nconst colors = [\"#D291BC\", \"#B8DBD0\", \"#FFAF68\", \"#E8A68E\", \"9BB8ED\", \"A39FE1\", \"B3D9B2\"]; // initial label values\n\nlet labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"]; // initial datasets\n\nconst data = {\n  labels,\n  datasets: [{\n    label: \"Dataset 1\",\n    data: labels.map(() => Math.random() * 1000 + 1),\n    borderColor: \"rgb(255, 99, 132)\",\n    backgroundColor: \"rgba(255, 99, 132, 0.5)\"\n  }, {\n    label: \"Dataset 2\",\n    data: labels.map(() => Math.random() * 1000 + 1),\n    borderColor: \"rgb(53, 162, 235)\",\n    backgroundColor: \"rgba(53, 162, 235, 0.5)\"\n  }]\n}; // variables to store datasets obtained from csv file\n\nlet labels1 = [],\n    datasets = [],\n    xAxis = \"\"; // react FileUpload componenet\n\nconst FileUpload = () => {\n  _s();\n\n  // when new file is selected the previous datasets should be erased.\n  // so we are emptying the previous datasets\n  labels1 = [];\n  datasets = [];\n  xAxis = \"\"; // creating a state for csv file uploaded and chartdata\n\n  const [file, setFile] = useState();\n  const [chartData, setChartData] = useState(data);\n  const [Title, setTitle] = useState(\"Line Chart\"); // the standard options for the chart where only title is changed\n\n  let options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\"\n      },\n      title: {\n        display: true,\n        text: Title\n      }\n    }\n  }; // this function is used to create dataset from text which we obtain from csv file\n\n  const createJson = text => {\n    const headers = text.slice(0, text.indexOf(\"\\n\")).split(\",\");\n    const rows = text.slice(text.indexOf(\"\\n\") + 1, text.length).split(\"\\n\");\n    const colNumber = headers.length;\n    const rowNumber = rows.length;\n\n    for (let i = 1; i < colNumber; i++) {\n      const arr = [];\n\n      for (let j = 0; j < rowNumber; j++) {\n        arr.push(rows[j].split(\",\")[i]);\n      }\n\n      const obj = {\n        label: headers[i],\n        data: arr,\n        borderColor: colors[i - 1],\n        backgroundColor: colors[i - 1]\n      };\n      datasets.push(obj);\n    }\n\n    console.log(datasets);\n\n    for (let j = 0; j < rowNumber; j++) labels1.push(rows[j].split(\",\")[0]);\n\n    xAxis = headers[0];\n    const finalObject = {\n      labels: labels1,\n      datasets\n    };\n    setChartData(finalObject);\n  }; // function to read the file\n\n\n  const readFile = () => {\n    const uploadedFile = file;\n\n    if (uploadedFile != null) {\n      // creating a file reader and reading the csv file and converting into text\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        createJson(e.target.result);\n      };\n\n      reader.readAsText(uploadedFile);\n      const newTitle = uploadedFile.name.slice(0, file.name.length - 4).toUpperCase();\n      setTitle(newTitle); //console.log(uploadedFile);\n    }\n  }; // jsx code for the component\n\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"file-form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          id: \"inputGroupFile02\",\n          class: \"form-control\",\n          onChange: e => {\n            readFile(e.target.files[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-primary\",\n          type: \"submit\",\n          onClick: e => {\n            e.preventDefault();\n            console.log(\"hello\", readFile(file));\n            if (file) readFile();\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData,\n      height: \"4000\",\n      width: \"4000\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileUpload, \"iult9+vbt/7ZMuE6/abBQ9BEjzg=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","Fragment","useState","Line","readFile","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","register","colors","labels","data","datasets","label","map","Math","random","borderColor","backgroundColor","labels1","xAxis","FileUpload","file","setFile","chartData","setChartData","setTitle","options","responsive","plugins","legend","position","title","display","text","createJson","headers","slice","indexOf","split","rows","length","colNumber","rowNumber","i","arr","j","push","obj","console","log","finalObject","uploadedFile","reader","FileReader","onload","e","target","result","readAsText","newTitle","name","toUpperCase","files","preventDefault"],"sources":["D:/chartjs/chart/src/components/FileUpload.js"],"sourcesContent":["// importing the required components\r\n\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./FileUpload.css\"\r\nimport readFile from \"./GetJSON\";\r\n\r\n// importing the elements of chart.js\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement\r\n);\r\n\r\n// getting the colors for different datasets\r\nconst colors = [\"#D291BC\", \"#B8DBD0\", \"#FFAF68\", \"#E8A68E\",\"9BB8ED\",\"A39FE1\",\"B3D9B2\"];\r\n\r\n// initial label values\r\nlet labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\r\n\r\n// initial datasets\r\nconst data = {\r\n  labels,\r\n  datasets: [\r\n    {\r\n      label: \"Dataset 1\",\r\n      data: labels.map(() => Math.random() * 1000 + 1),\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Dataset 2\",\r\n      data: labels.map(() => Math.random() * 1000 + 1),\r\n      borderColor: \"rgb(53, 162, 235)\",\r\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n    },\r\n  ],\r\n};\r\n\r\n// variables to store datasets obtained from csv file\r\nlet labels1 = [],\r\n  datasets = [],\r\n  xAxis = \"\";\r\n\r\n// react FileUpload componenet\r\nconst FileUpload = () => {\r\n  // when new file is selected the previous datasets should be erased.\r\n  // so we are emptying the previous datasets\r\n  labels1 = [];\r\n  datasets = [];\r\n  xAxis = \"\";\r\n\r\n  // creating a state for csv file uploaded and chartdata\r\n  const [file, setFile] = useState();\r\n  const [chartData, setChartData] = useState(data);\r\n  const [Title, setTitle] = useState(\"Line Chart\");\r\n\r\n  // the standard options for the chart where only title is changed\r\n  let options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: Title,\r\n      },\r\n    },\r\n  };\r\n  // this function is used to create dataset from text which we obtain from csv file\r\n  const createJson = (text) => {\r\n    const headers = text.slice(0, text.indexOf(\"\\n\")).split(\",\");\r\n    const rows = text.slice(text.indexOf(\"\\n\") + 1, text.length).split(\"\\n\");\r\n\r\n    const colNumber = headers.length;\r\n    const rowNumber = rows.length;\r\n\r\n    for (let i = 1; i < colNumber; i++) {\r\n      const arr = [];\r\n      for (let j = 0; j < rowNumber; j++) {\r\n        arr.push(rows[j].split(\",\")[i]);\r\n      }\r\n      const obj = {\r\n        label: headers[i],\r\n        data: arr,\r\n        borderColor: colors[i - 1],\r\n        backgroundColor: colors[i - 1],\r\n      };\r\n      datasets.push(obj);\r\n    }\r\n\r\n    console.log(datasets);\r\n    for (let j = 0; j < rowNumber; j++) labels1.push(rows[j].split(\",\")[0]);\r\n\r\n    xAxis = headers[0];\r\n\r\n    const finalObject = { labels: labels1, datasets };\r\n    setChartData(finalObject);\r\n  };\r\n\r\n  // function to read the file\r\n  const readFile = () => {\r\n    const uploadedFile = file;\r\n    if (uploadedFile != null) {\r\n      // creating a file reader and reading the csv file and converting into text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        \r\n        createJson(e.target.result);\r\n      };\r\n      reader.readAsText(uploadedFile);\r\n      const newTitle = uploadedFile.name\r\n        .slice(0, file.name.length - 4)\r\n        .toUpperCase();\r\n      setTitle(newTitle);\r\n      //console.log(uploadedFile);\r\n    }\r\n  };\r\n\r\n  // jsx code for the component\r\n  return (\r\n    <Fragment>\r\n      <form id=\"file-form\">\r\n      <div class=\"mb-3\">\r\n      <input\r\n          type=\"file\"\r\n          accept=\".csv\"\r\n          id=\"inputGroupFile02\"\r\n          class=\"form-control\"\r\n          onChange={(e) => {readFile(e.target.files[0])}}\r\n        />\r\n        <button\r\n        class=\"btn btn-primary\"\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            console.log(\"hello\",readFile(file))\r\n            if (file) readFile();\r\n          }}>\r\n          Submit\r\n        </button>\r\n        \r\n          \r\n      </div>\r\n        \r\n        \r\n      </form>\r\n      <Line options={options} data={chartData} height=\"4000\" width=\"4000\"/>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}