{"ast":null,"code":"import _slicedToArray from\"D:/chartjs/chart/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// importing the required components\nimport React,{Fragment,useState}from\"react\";import{Line}from\"react-chartjs-2\";import\"./FileUpload.css\";// importing the elements of chart.js\nimport{Chart as ChartJS,CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend,PointElement,LineElement}from\"chart.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,BarElement,Title,Tooltip,Legend,PointElement,LineElement);// getting the colors for different datasets\nvar colors=[\"#D291BC\",\"#B8DBD0\",\"#FFAF68\",\"#E8A68E\",\"9BB8ED\",\"A39FE1\",\"B3D9B2\"];// initial label values\nvar labels=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\"];// initial datasets\nvar data={labels:labels,datasets:[{label:\"Dataset 1\",data:labels.map(function(){return Math.random()*1000+1;}),borderColor:\"rgb(255, 99, 132)\",backgroundColor:\"rgba(255, 99, 132, 0.5)\"},{label:\"Dataset 2\",data:labels.map(function(){return Math.random()*1000+1;}),borderColor:\"rgb(53, 162, 235)\",backgroundColor:\"rgba(53, 162, 235, 0.5)\"}]};// variables to store datasets obtained from csv file\nvar labels1=[],datasets=[],xAxis=\"\";// react FileUpload componenet\nvar FileUpload=function FileUpload(){// when new file is selected the previous datasets should be erased.\n// so we are emptying the previous datasets\nlabels1=[];datasets=[];xAxis=\"\";// creating a state for csv file uploaded and chartdata\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),file=_useState2[0],setFile=_useState2[1];var _useState3=useState(data),_useState4=_slicedToArray(_useState3,2),chartData=_useState4[0],setChartData=_useState4[1];var _useState5=useState(\"Line Chart\"),_useState6=_slicedToArray(_useState5,2),Title=_useState6[0],setTitle=_useState6[1];// the standard options for the chart where only title is changed\nvar options={responsive:true,plugins:{legend:{position:\"top\"},title:{display:true,text:Title}}};// this function is used to create dataset from text which we obtain from csv file\nvar createJson=function createJson(text){var headers=text.slice(0,text.indexOf(\"\\n\")).split(\",\");var rows=text.slice(text.indexOf(\"\\n\")+1,text.length).split(\"\\n\");var colNumber=headers.length;var rowNumber=rows.length;for(var i=1;i<colNumber;i++){var arr=[];for(var j=0;j<rowNumber;j++){arr.push(rows[j].split(\",\")[i]);}var obj={label:headers[i],data:arr,borderColor:colors[i-1],backgroundColor:colors[i-1]};datasets.push(obj);}console.log(datasets);for(var _j=0;_j<rowNumber;_j++){labels1.push(rows[_j].split(\",\")[0]);}xAxis=headers[0];var finalObject={labels:labels1,datasets:datasets};setChartData(finalObject);};// function to read the file\nvar readFile=function readFile(){var uploadedFile=file;if(uploadedFile!=null){// creating a file reader and reading the csv file and converting into text\nvar reader=new FileReader();reader.onload=function(e){createJson(e.target.result);};reader.readAsText(uploadedFile);var newTitle=uploadedFile.name.slice(0,file.name.length-4).toUpperCase();setTitle(newTitle);//console.log(uploadedFile);\n}};// jsx code for the component\nreturn/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(\"form\",{id:\"file-form\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"mb-3\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",id:\"inputGroupFile02\",class:\"form-control\",onChange:function onChange(e){return setFile(e.target.files[0]);}}),/*#__PURE__*/_jsx(\"button\",{class:\"btn btn-primary\",type:\"submit\",onClick:function onClick(e){e.preventDefault();if(file)readFile();},children:\"Submit\"})]})}),/*#__PURE__*/_jsx(Line,{options:options,data:chartData,height:\"1000\",width:\"2000\"})]});};export default FileUpload;","map":{"version":3,"names":["React","Fragment","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","register","colors","labels","data","datasets","label","map","Math","random","borderColor","backgroundColor","labels1","xAxis","FileUpload","file","setFile","chartData","setChartData","setTitle","options","responsive","plugins","legend","position","title","display","text","createJson","headers","slice","indexOf","split","rows","length","colNumber","rowNumber","i","arr","j","push","obj","console","log","finalObject","readFile","uploadedFile","reader","FileReader","onload","e","target","result","readAsText","newTitle","name","toUpperCase","files","preventDefault"],"sources":["D:/chartjs/chart/src/components/FileUpload.js"],"sourcesContent":["// importing the required components\r\n\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"./FileUpload.css\"\r\n\r\n// importing the elements of chart.js\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement,\r\n} from \"chart.js\";\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  PointElement,\r\n  LineElement\r\n);\r\n\r\n// getting the colors for different datasets\r\nconst colors = [\"#D291BC\", \"#B8DBD0\", \"#FFAF68\", \"#E8A68E\",\"9BB8ED\",\"A39FE1\",\"B3D9B2\"];\r\n\r\n// initial label values\r\nlet labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\r\n\r\n// initial datasets\r\nconst data = {\r\n  labels,\r\n  datasets: [\r\n    {\r\n      label: \"Dataset 1\",\r\n      data: labels.map(() => Math.random() * 1000 + 1),\r\n      borderColor: \"rgb(255, 99, 132)\",\r\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\r\n    },\r\n    {\r\n      label: \"Dataset 2\",\r\n      data: labels.map(() => Math.random() * 1000 + 1),\r\n      borderColor: \"rgb(53, 162, 235)\",\r\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\r\n    },\r\n  ],\r\n};\r\n\r\n// variables to store datasets obtained from csv file\r\nlet labels1 = [],\r\n  datasets = [],\r\n  xAxis = \"\";\r\n\r\n// react FileUpload componenet\r\nconst FileUpload = () => {\r\n  // when new file is selected the previous datasets should be erased.\r\n  // so we are emptying the previous datasets\r\n  labels1 = [];\r\n  datasets = [];\r\n  xAxis = \"\";\r\n\r\n  // creating a state for csv file uploaded and chartdata\r\n  const [file, setFile] = useState();\r\n  const [chartData, setChartData] = useState(data);\r\n  const [Title, setTitle] = useState(\"Line Chart\");\r\n\r\n  // the standard options for the chart where only title is changed\r\n  let options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: Title,\r\n      },\r\n    },\r\n  };\r\n  // this function is used to create dataset from text which we obtain from csv file\r\n  const createJson = (text) => {\r\n    const headers = text.slice(0, text.indexOf(\"\\n\")).split(\",\");\r\n    const rows = text.slice(text.indexOf(\"\\n\") + 1, text.length).split(\"\\n\");\r\n\r\n    const colNumber = headers.length;\r\n    const rowNumber = rows.length;\r\n\r\n    for (let i = 1; i < colNumber; i++) {\r\n      const arr = [];\r\n      for (let j = 0; j < rowNumber; j++) {\r\n        arr.push(rows[j].split(\",\")[i]);\r\n      }\r\n      const obj = {\r\n        label: headers[i],\r\n        data: arr,\r\n        borderColor: colors[i - 1],\r\n        backgroundColor: colors[i - 1],\r\n      };\r\n      datasets.push(obj);\r\n    }\r\n\r\n    console.log(datasets);\r\n    for (let j = 0; j < rowNumber; j++) labels1.push(rows[j].split(\",\")[0]);\r\n\r\n    xAxis = headers[0];\r\n\r\n    const finalObject = { labels: labels1, datasets };\r\n    setChartData(finalObject);\r\n  };\r\n\r\n  // function to read the file\r\n  const readFile = () => {\r\n    const uploadedFile = file;\r\n    if (uploadedFile != null) {\r\n      // creating a file reader and reading the csv file and converting into text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        \r\n        createJson(e.target.result);\r\n      };\r\n      reader.readAsText(uploadedFile);\r\n      const newTitle = uploadedFile.name\r\n        .slice(0, file.name.length - 4)\r\n        .toUpperCase();\r\n      setTitle(newTitle);\r\n      //console.log(uploadedFile);\r\n    }\r\n  };\r\n\r\n  // jsx code for the component\r\n  return (\r\n    <Fragment>\r\n      <form id=\"file-form\">\r\n      <div class=\"mb-3\">\r\n      <input\r\n          type=\"file\"\r\n          accept=\".csv\"\r\n          id=\"inputGroupFile02\"\r\n          class=\"form-control\"\r\n          onChange={(e) => setFile(e.target.files[0])}\r\n        />\r\n        <button\r\n        class=\"btn btn-primary\"\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            if (file) readFile();\r\n          }}>\r\n          Submit\r\n        </button>\r\n        \r\n          \r\n      </div>\r\n        \r\n        \r\n      </form>\r\n      <Line options={options} data={chartData} height=\"1000\" width=\"2000\"/>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}