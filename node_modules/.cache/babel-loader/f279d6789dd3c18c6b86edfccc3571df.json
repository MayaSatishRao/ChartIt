{"ast":null,"code":"var _jsxFileName = \"D:\\\\chartjs\\\\chart\\\\src\\\\components\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, PointElement, LineElement);\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: true,\n      text: 'Chart.js Line Chart'\n    }\n  }\n};\nlet labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\nconst data = {\n  labels,\n  datasets: [{\n    label: 'Dataset 1',\n    data: labels.map(() => Math.random() * 1000 + 1),\n    borderColor: 'rgb(255, 99, 132)',\n    backgroundColor: 'rgba(255, 99, 132, 0.5)'\n  }, {\n    label: 'Dataset 2',\n    data: labels.map(() => Math.random() * 1000 + 1),\n    borderColor: 'rgb(53, 162, 235)',\n    backgroundColor: 'rgba(53, 162, 235, 0.5)'\n  }]\n};\nlet labels1 = [],\n    datasets = [],\n    xAxis = \"\";\n\nconst FileUpload = () => {\n  _s();\n\n  const [file, setFile] = useState();\n  const [chartData, setChartData] = useState(data);\n\n  const createJson = text => {\n    const headers = text.slice(0, text.indexOf('\\n')).split(',');\n    const rows = text.slice(text.indexOf('\\n') + 1, text.length).split('\\n');\n    const colNumber = headers.length;\n    const rowNumber = rows.length;\n\n    for (let i = 1; i < colNumber; i++) {\n      const arr = [];\n\n      for (let j = 0; j < rowNumber; j++) {\n        arr.push(rows[j].split(\",\")[i]);\n      }\n\n      const obj = {\n        label: headers[i],\n        data: arr,\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      };\n      datasets.push(obj);\n    }\n\n    for (let j = 0; j < rowNumber; j++) labels1.push(rows[j].split(\",\")[0]);\n\n    xAxis = headers[0];\n    console.log(xAxis); //const finalObject = {labels1,}\n\n    setChartData(datasets);\n  };\n\n  const readFile = () => {\n    const uploadedFile = file;\n    console.log(file);\n\n    if (uploadedFile != null) {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        createJson(e.target.result);\n      };\n\n      reader.readAsText(uploadedFile);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"file-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        id: \"inputGroupFile02\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: e => {\n          e.preventDefault();\n          if (file) readFile();\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData,\n      height: 1000,\n      width: 2000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FileUpload, \"IDeh+NW0H37WwHd8QG5jCt7z1zA=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","Fragment","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","PointElement","LineElement","register","options","responsive","plugins","legend","position","title","display","text","labels","data","datasets","label","map","Math","random","borderColor","backgroundColor","labels1","xAxis","FileUpload","file","setFile","chartData","setChartData","createJson","headers","slice","indexOf","split","rows","length","colNumber","rowNumber","i","arr","j","push","obj","console","log","readFile","uploadedFile","reader","FileReader","onload","e","target","result","readAsText","files","preventDefault"],"sources":["D:/chartjs/chart/src/components/FileUpload.js"],"sourcesContent":["import React, {Fragment, useState} from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\n\r\nimport {\r\n     Chart as ChartJS,\r\n     CategoryScale,\r\n     LinearScale,\r\n     BarElement,\r\n     Title,\r\n     Tooltip,\r\n     Legend,\r\n     PointElement,\r\n     LineElement,\r\n   } from 'chart.js';\r\n \r\n   ChartJS.register(\r\n     CategoryScale,\r\n     LinearScale,\r\n     BarElement,\r\n     Title,\r\n     Tooltip,\r\n     Legend,\r\n     PointElement,\r\n     LineElement\r\n   );\r\n const options={\r\n     responsive: true,\r\n   plugins: {\r\n     legend: {\r\n       position: 'top',\r\n     },\r\n     title: {\r\n       display: true,\r\n       text: 'Chart.js Line Chart',\r\n     },\r\n   },\r\n }\r\n\r\n let labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n\r\nconst data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Dataset 1',\r\n        data: labels.map(() => Math.random()*1000+1),\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n      },\r\n      {\r\n        label: 'Dataset 2',\r\n        data: labels.map(() => Math.random()*1000+1),\r\n        borderColor: 'rgb(53, 162, 235)',\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n      },\r\n    ],\r\n  };\r\n\r\nlet labels1=[], datasets=[], xAxis=\"\";\r\nconst FileUpload = ()=>{\r\n\r\n     const [file,setFile] = useState();\r\n     const [chartData,setChartData]=useState(data);\r\n\r\n      const createJson = (text)=>{\r\n          const headers = text.slice(0,text.indexOf('\\n')).split(',');\r\n          const rows = text.slice(text.indexOf('\\n')+1,text.length).split('\\n');\r\n          \r\n          const colNumber = headers.length;\r\n          const rowNumber = rows.length;\r\n\r\n          for(let i=1;i<colNumber;i++){\r\n               const arr = [];\r\n               for(let j=0;j<rowNumber;j++){\r\n                    arr.push(rows[j].split(\",\")[i]);\r\n               }\r\n               const obj = {label:headers[i],\r\n                            data:arr,\r\n                            borderColor: 'rgb(53, 162, 235)',\r\n                            backgroundColor: 'rgba(53, 162, 235, 0.5)'};\r\n               datasets.push(obj);\r\n          }\r\n\r\n          for(let j=0;j<rowNumber;j++)\r\n          labels1.push(rows[j].split(\",\")[0]);\r\n\r\n          xAxis= headers[0];\r\n          console.log(xAxis);\r\n          \r\n          //const finalObject = {labels1,}\r\n          setChartData(datasets);\r\n      }\r\n\r\n\r\n      const readFile = ()=>{\r\n           const uploadedFile = file;\r\n           console.log(file);\r\n           if(uploadedFile!=null){\r\n               const reader = new FileReader();\r\n               reader.onload=(e)=>{\r\n                    createJson(e.target.result);\r\n               }\r\n               reader.readAsText(uploadedFile);\r\n           }\r\n      }\r\n     \r\n     return <Fragment>\r\n           \r\n           <form id=\"file-form\">\r\n           <input type=\"file\" accept=\".csv\"  id=\"inputGroupFile02\" onChange={e=>setFile(e.target.files[0])}/>\r\n           <button type=\"submit\" onClick={(e)=>{\r\n                e.preventDefault();\r\n                if(file)\r\n                readFile();\r\n           }}>Submit</button>\r\n           </form>\r\n           <Line options={options} data={chartData} height={1000} width={2000}/>\r\n             \r\n           \r\n     </Fragment>\r\n}\r\n\r\nexport default FileUpload;"],"mappings":"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"},"metadata":{},"sourceType":"module"}