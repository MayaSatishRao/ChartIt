{"ast":null,"code":"var _jsxFileName = \"D:\\\\chartjs\\\\chart\\\\src\\\\components\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet labels = [],\n    datasets = [],\n    xAxis = \"\";\n\nconst FileUpload = () => {\n  _s();\n\n  const [file, setFile] = useState();\n\n  const createJson = text => {\n    const headers = text.slice(0, text.indexOf('\\n')).split(',');\n    const rows = text.slice(text.indexOf('\\n') + 1, text.length).split('\\n');\n    const colNumber = headers.length;\n    const rowNumber = rows.length;\n\n    for (let i = 0; i < colNumber; i++) {\n      const arr = [];\n\n      for (let j = 0; j < rowNumber; j++) {\n        arr.push(rows[j].split(\",\")[i]);\n      }\n    }\n  };\n\n  const readFile = () => {\n    const uploadedFile = file;\n    console.log(file);\n\n    if (uploadedFile != null) {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        createJson(e.target.result);\n      };\n\n      reader.readAsText(uploadedFile);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"file-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        id: \"inputGroupFile02\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: e => {\n          e.preventDefault();\n          if (file) readFile();\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FileUpload, \"i39u8FmAuCjShZpOAK3KAenYWTE=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","Fragment","useState","labels","datasets","xAxis","FileUpload","file","setFile","createJson","text","headers","slice","indexOf","split","rows","length","colNumber","rowNumber","i","arr","j","push","readFile","uploadedFile","console","log","reader","FileReader","onload","e","target","result","readAsText","files","preventDefault"],"sources":["D:/chartjs/chart/src/components/FileUpload.js"],"sourcesContent":["import React, {Fragment, useState} from \"react\"\r\n\r\nlet labels=[], datasets=[], xAxis=\"\";\r\nconst FileUpload = ()=>{\r\n\r\n     const [file,setFile] = useState();\r\n\r\n      const createJson = (text)=>{\r\n          const headers = text.slice(0,text.indexOf('\\n')).split(',');\r\n          const rows = text.slice(text.indexOf('\\n')+1,text.length).split('\\n');\r\n          \r\n          const colNumber = headers.length;\r\n          const rowNumber = rows.length;\r\n\r\n          for(let i=0;i<colNumber;i++){\r\n               const arr = [];\r\n               for(let j=0;j<rowNumber;j++){\r\n                    arr.push(rows[j].split(\",\")[i]);\r\n               }\r\n          }\r\n      }\r\n      const readFile = ()=>{\r\n           const uploadedFile = file;\r\n           console.log(file);\r\n           if(uploadedFile!=null){\r\n               const reader = new FileReader();\r\n               reader.onload=(e)=>{\r\n                    createJson(e.target.result);\r\n               }\r\n               reader.readAsText(uploadedFile);\r\n           }\r\n      }\r\n     \r\n     return <Fragment>\r\n           \r\n           <form id=\"file-form\">\r\n           <input type=\"file\" accept=\".csv\"  id=\"inputGroupFile02\" onChange={e=>setFile(e.target.files[0])}/>\r\n           <button type=\"submit\" onClick={(e)=>{\r\n                e.preventDefault();\r\n                if(file)\r\n                readFile();\r\n           }}>Submit</button>\r\n           </form>\r\n\r\n             \r\n           \r\n     </Fragment>\r\n}\r\n\r\nexport default FileUpload;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;AAEA,IAAIC,MAAM,GAAC,EAAX;AAAA,IAAeC,QAAQ,GAAC,EAAxB;AAAA,IAA4BC,KAAK,GAAC,EAAlC;;AACA,MAAMC,UAAU,GAAG,MAAI;EAAA;;EAElB,MAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBN,QAAQ,EAA/B;;EAEC,MAAMO,UAAU,GAAIC,IAAD,IAAQ;IACvB,MAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAaF,IAAI,CAACG,OAAL,CAAa,IAAb,CAAb,EAAiCC,KAAjC,CAAuC,GAAvC,CAAhB;IACA,MAAMC,IAAI,GAAGL,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,OAAL,CAAa,IAAb,IAAmB,CAA9B,EAAgCH,IAAI,CAACM,MAArC,EAA6CF,KAA7C,CAAmD,IAAnD,CAAb;IAEA,MAAMG,SAAS,GAAGN,OAAO,CAACK,MAA1B;IACA,MAAME,SAAS,GAAGH,IAAI,CAACC,MAAvB;;IAEA,KAAI,IAAIG,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,SAAd,EAAwBE,CAAC,EAAzB,EAA4B;MACvB,MAAMC,GAAG,GAAG,EAAZ;;MACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,SAAd,EAAwBG,CAAC,EAAzB,EAA4B;QACvBD,GAAG,CAACE,IAAJ,CAASP,IAAI,CAACM,CAAD,CAAJ,CAAQP,KAAR,CAAc,GAAd,EAAmBK,CAAnB,CAAT;MACJ;IACL;EACJ,CAbD;;EAcA,MAAMI,QAAQ,GAAG,MAAI;IAChB,MAAMC,YAAY,GAAGjB,IAArB;IACAkB,OAAO,CAACC,GAAR,CAAYnB,IAAZ;;IACA,IAAGiB,YAAY,IAAE,IAAjB,EAAsB;MAClB,MAAMG,MAAM,GAAG,IAAIC,UAAJ,EAAf;;MACAD,MAAM,CAACE,MAAP,GAAeC,CAAD,IAAK;QACdrB,UAAU,CAACqB,CAAC,CAACC,MAAF,CAASC,MAAV,CAAV;MACJ,CAFD;;MAGAL,MAAM,CAACM,UAAP,CAAkBT,YAAlB;IACH;EACL,CAVD;;EAYD,oBAAO,QAAC,QAAD;IAAA,uBAED;MAAM,EAAE,EAAC,WAAT;MAAA,wBACA;QAAO,IAAI,EAAC,MAAZ;QAAmB,MAAM,EAAC,MAA1B;QAAkC,EAAE,EAAC,kBAArC;QAAwD,QAAQ,EAAEM,CAAC,IAAEtB,OAAO,CAACsB,CAAC,CAACC,MAAF,CAASG,KAAT,CAAe,CAAf,CAAD;MAA5E;QAAA;QAAA;QAAA;MAAA,QADA,eAEA;QAAQ,IAAI,EAAC,QAAb;QAAsB,OAAO,EAAGJ,CAAD,IAAK;UAC/BA,CAAC,CAACK,cAAF;UACA,IAAG5B,IAAH,EACAgB,QAAQ;QACZ,CAJD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFA;IAAA;MAAA;MAAA;MAAA;IAAA;EAFC;IAAA;IAAA;IAAA;EAAA,QAAP;AAcJ,CA5CD;;GAAMjB,U;;KAAAA,U;AA8CN,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}