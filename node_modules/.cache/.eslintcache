[{"D:\\chartjs\\chart\\src\\index.js":"1","D:\\chartjs\\chart\\src\\reportWebVitals.js":"2","D:\\chartjs\\chart\\src\\App.js":"3","D:\\chartjs\\chart\\src\\components\\FileUpload.js":"4","D:\\chartjs\\chart\\src\\components\\GetJSON.js":"5","D:\\chartjs\\chart\\src\\components\\Graph.js":"6"},{"size":197,"mtime":1654446665881,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1654194501786,"results":"9","hashOfConfig":"8"},{"size":1639,"mtime":1659180719807,"results":"10","hashOfConfig":"8"},{"size":1198,"mtime":1659159940146,"results":"11","hashOfConfig":"8"},{"size":752,"mtime":1659016935062,"results":"12","hashOfConfig":"8"},{"size":2496,"mtime":1659175022116,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1xa8vlf",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"D:\\chartjs\\chart\\src\\index.js",[],[],[],"D:\\chartjs\\chart\\src\\reportWebVitals.js",[],[],"D:\\chartjs\\chart\\src\\App.js",["35"],[],"import { useState } from 'react';\nimport Graph from './components/Graph';\nimport './App.css';\nimport FileUpload from \"./components/FileUpload\";\nimport image from \"./images/dataset-image.png\"\n\n\nconst data = [[\"Graph-Title\",\"X-axis label\",\"Y-axis label\"]\n  ,['\"Month\"', ' \"1958\"', ' \"1959\"', ' \"1960\"']\n, ['\"JAN\"', '  340', '  360', '  417']\n,['\"FEB\"', '  318', '  342', '  391']\n, ['\"MAR\"', '  362', '  406', '  419']\n, ['\"APR\"', '  348', '  396', '  461']\n, ['\"MAY\"', '  363', '  420', '  472']\n, ['\"JUN\"', '  435', '  472', '  535']\n, ['\"JUL\"', '  491', '  548', '  622']\n, ['\"AUG\"', '  505', '  559', '  606']\n, ['\"SEP\"', '  404', '  463', '  508']\n, ['\"OCT\"', '  359', '  407', '  461']\n, ['\"NOV\"', '  310', '  362', '  390']\n, ['\"DEC\"', '  337', '  405', '  432']]\n\nfunction App() {\n\n  const [chartData, setChartData] = useState(data);\n  const [type,setType] = useState(\"bar\");\n  return (\n    <div className='header'>\n    <h1>CHARTIT </h1>\n    <p> Upload your csv file and see the chart!</p>\n    <p className='instruction'>Please make sure that your csv file has the following format:</p>\n    <div className=\"img-inst\">\n    <ol>\n      <li>The first row contains the chart title, x-axis label and y-axis label respectively</li>\n      <li>The first column contains the category labels of x-axis</li>\n      <li>The next columns contain the data points for each dataset where the first row of each column contains the name of dataset</li>\n    </ol>\n    <img src={image}/>\n    </div>\n      <FileUpload changeState={setChartData} changeType={setType}/>\n      <Graph chartData={chartData} type={type}/>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\chartjs\\chart\\src\\components\\FileUpload.js",[],[],"D:\\chartjs\\chart\\src\\components\\GetJSON.js",[],[],"D:\\chartjs\\chart\\src\\components\\Graph.js",["36","37","38","39"],[],"import { Bar , Line} from \"react-chartjs-2\";\r\nimport Chart from 'chart.js/auto';\r\nimport './Graph.css'\r\n  \r\nconst colors = [\"#D291BC\", \"#B8DBD0\", \"#FFAF68\", \"#E8A68E\",\"9BB8ED\",\"A39FE1\",\"B3D9B2\"];\r\n\r\n\r\nfunction createOptions(arr){\r\n  let options = {\r\n    maintainAspectRatio:true,\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: \"top\",\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: arr[0][0],\r\n        font:{\r\n          size:30,\r\n          family:\"Lato\"\r\n        }\r\n      },  \r\n    },\r\n    scales:{\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: arr[0][2],\r\n          font:{\r\n            size:15\r\n          }\r\n        }\r\n      },\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: arr[0][1],\r\n          font:{\r\n            size:15\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return options;\r\n}\r\nfunction createLabels(arr){\r\n       if(arr!=undefined){\r\n        let labels = [];\r\n        for(let i=2;i<arr.length;i++)\r\n              if(arr[i][0].length!=0)\r\n            labels.push(arr[i][0]);\r\n         return (labels); \r\n       }\r\n       \r\n}\r\n\r\n\r\n\r\nfunction createDataSets(arr){\r\n      \r\n      let datasetsArray= [];\r\n      for(let i=1;i<arr[1].length;i++){\r\n            let dataArray = [];\r\n            for(let j=2;j<arr.length;j++){\r\n                if(arr[j][i]!=undefined)\r\n                dataArray.push(arr[j][i]);\r\n            }\r\n            \r\n            let datasetObj = {\r\n                label: arr[1][i],\r\n                data: dataArray,\r\n                borderColor:\"#000\",\r\n                borderWidth:\"1.5\",\r\n                backgroundColor:colors[i],\r\n                hoverBorderWidth:\"2\"\r\n            }\r\n            datasetsArray.push(datasetObj);\r\n      }\r\n      return datasetsArray;\r\n}\r\n\r\n\r\nconst Graph = (props)=>{\r\n \r\n       let actualData = {\r\n        labels:createLabels(props.chartData),\r\n        datasets: createDataSets(props.chartData),\r\n        backgroundColor: colors[0]\r\n       }\r\n    \r\n    if(props.type===\"line\"){\r\n      return(\r\n        <div className=\"graph-container\">\r\n          <Line className=\"graph\" data={actualData} options={createOptions(props.chartData)} radius=\"50\"/>\r\n        </div>\r\n      );\r\n    }else{\r\n      return(\r\n        <div className=\"graph-container\">\r\n          <Bar className=\"graph\" data={actualData} options={createOptions(props.chartData)} radius=\"50\"/>\r\n        </div>\r\n      );\r\n    }\r\n     \r\n    \r\n    \r\n}\r\n\r\nexport default Graph;",{"ruleId":"40","severity":1,"message":"41","line":38,"column":5,"nodeType":"42","endLine":38,"endColumn":23},{"ruleId":"43","severity":1,"message":"44","line":2,"column":8,"nodeType":"45","messageId":"46","endLine":2,"endColumn":13},{"ruleId":"47","severity":1,"message":"48","line":50,"column":14,"nodeType":"49","messageId":"50","endLine":50,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":53,"column":34,"nodeType":"49","messageId":"50","endLine":53,"endColumn":36},{"ruleId":"47","severity":1,"message":"48","line":68,"column":29,"nodeType":"49","messageId":"50","endLine":68,"endColumn":31},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Chart' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]